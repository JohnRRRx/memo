3/11
スキルチェック
Cランク　1問

-------------------------------------------------------

取得した文字列は「文字+数字」の組み合わせ
数字の若い順で文字列を並び替えることが求められてる

例えば

「明日は12」
「昨日は10」
「今日は11」

を

「昨日は10」
「今日は11」
「明日は12」

に変更。

-------------------------------------------------------


am = gets.to_i
#文字列の行数を取得

human = am.times.map{gets.chomp}
#行数の分、文字列を取得

wake = []
#後ほど使う空配列

human.each do |x|
#取得したん項目を一つずつ処理していく
   y = x.scan(/\d+/)[0].to_i
#scanメソッドで数字を探し出す(詳しい説明は一番下を参照)
#scan処理後、対象は配列になり、そのままto_i使えない
#今回対象配列内は1つの要素入らないので、firstやlast、[0]などで中身を指定すればto_iが使えるようになる
   wake << [x,y]
# [文字数字,数字]の形で空配列に入れる
# 例：[今日は11,11]
end

jun = wake.sort_by{|m,n|n}
#指定の要素で、配列の順番を並び替える
# 例：[今日は11,11]、数字の11で並び替える

jun.each do |j,b|
#並び替えた配列を一つずつ処理していく
   puts j
#配列の[0]のみ出力
end


-------------------------------------------------------



scanメソッド部分の理解
rubyの正規表現の「\d」で10進数字、つまり[0-9]をscanの対象に設定
\dだけの場合、scanした数字を1つずつ取得
例えば
「昨日は10」
「今日は11」
「明日は12」
の場合
```
昨日は
1
0
今日は
1
1
明日は
1
2
```
のように、数字が1つ1行になるように処理される
これは数字の若い順で並び替える目的が達成できない。

後ろに+をつける意味は「連続」、これで
```
昨日は
10
今日は
11
明日は
12
```
のように、同じ項目の数字が1行になるように処理される

rubyの正規表現(一部)
文字クラスの略記法
よく使われる文字クラスには省略記法

\w 単語構成文字 [a-zA-Z0-9_]
\W 非単語構成文字 [^a-zA-Z0-9_]
\s 空白文字 [ \t\r\n\f\v]
\S 非空白文字 [^ \t\r\n\f\v]
\d 10進数字 [0-9]
\D 非10進数字 [^0-9]
\h 16進数字 [0-9a-fA-F]
\H 非16進数字 [^0-9a-fA-F]

繰り返し処理
+ 1回以上
