3/9
スキルチェック
Cランク　3問

-------------------------------------------

配列の中身同じ要素入ってるか？

bin = gets.split.map(&:to_i)
#比較基準の配列取得
#[1 2 3 4 5 6]
m = gets.to_i
#比較する配列個数を取得
#[3]
m.times do
#配列内の各要素を操作する必要なく、timesで回数分だけ配列同士を操作
 ken = gets.split.map(&:to_i)
#指定された配列個数分、配列を取得
 puts (bin & ken).size
#比較基準の配列と多数の配列を一つずつ比較し、
# &で同じ要素持ってるかを確認できる
# sizeで要素の個数を出力
end


timesを使うべき時：
・繰り返し回数が決まっているとき。
・配列の要素を操作するわけではなく、決まった回数だけ処理を行いたい場合。

eachを使うべき時：
・配列やリストなどを一つずつ処理したい場合。
・配列の要素を順番に取り出して処理を行う時。


-------------------------------------------

s = gets.split.map(&:to_i)
#[生徒数,問題数]
all = s[0].times.map{gets.split.map(&:to_i)}
#[提出日,正解数]
r = 100/s[1]
#[1問？点]
t = 0
#点数
all.each do |d,m|
 if d <= 0
    t = m*r
 elsif d > 0 && d <10
    t = m*r*80/100
 elsif d >=10
    t =0
 end

#ランク判定
 if t>=80
    puts "A"
 elsif t >= 70 && t <= 79
    puts "B"
 elsif t >=60 && t <=69
    puts "C"
 else
    puts "D"
 end
end

-------------------------------------------

行ごとの文字数を変更

m = gets.split.map(&:to_i)
#[行数,横幅,行ごとの文字数]
c = m[0].times.map{gets.chomp}.join
#全行を文字列として取得
#joinで改行を消し、全文字を1行にする
#最終的にcのデータ型は文字列

c.each_char.each_slice(m[2]){|a| puts a.join}
#cは文字列のため、そのままeach_slice付けたらエラーになる
#each_charを付けると、cのデータ型はString　→　Enumerator　に変わり、each_sliceも対応できるようになる

Enumerator
繰り返し処理を管理する仕組み
・文字列や配列などのデータ型に eachメソッドを使うと、内部的に Enumerator が使われることが多い。
・each_charなどを使って、文字列を Enumerator に変換し、その後 each_slice や他の繰り返し処理を利用することができる
