Ruby　Dランクスキルチェック
計30問
主に下記の内容

-------------------------------------------

割り算、商と余りを同じ行で出力する

絶対値
abs

商と余を配列で一緒に出す
divmod

3.divmod 2
=> [1, 1]
# [3/2と3%2]の結果


-------------------------------------------

文字を入れ替える
gsub

一文字目がAの場合Rに置き換える、それ以外はそのまま出力
a = gets.chomp
puts a[0] == "A" ? a.gsub("A", "R")  : a

-------------------------------------------

文字数比較、少ない方を出力

a = gets.chomp
b = gets.chomp
puts a.chars.count > b.chars.count ? b : a

簡潔に
a = gets.chomp
b = gets.chomp
puts a.size > b.size ? b : a

-------------------------------------------

文字と数値が入ってる配列["hello", "2"]
2文字目のeだけを出力

a = gets.split
puts a[0].slice(a[1].to_i-1)

slice使わず、そのまま配列要素のindexで行ける！

a = gets.split
puts a[0][a[1].to_i - 1]

-------------------------------------------

小数点以下切り捨て
a = gets.to_i
a = 1.4*a
puts a.floor

1行だけにもできる
puts (1.4 * gets.to_i).floor

-------------------------------------------

3つの数値を取得して演算
a = gets.to_i
b = gets.to_i
c = gets.to_i
puts a-b*c
を簡潔に
puts gets.to_i - gets.to_i * gets.to_i

-------------------------------------------

目標-実績
まだの場合、残りを表示
a = gets.to_i
b =gets.to_i
puts a-b >=0 ? "達成" : (a-b).abs

を簡潔に

puts (r = gets.to_i - gets.to_i) >= 0 ? "達成" : r.abs

-------------------------------------------

複数を一気に取得して、その間の差を計算する。
a = gets.to_i
b = gets.to_i
c = gets.to_i
d = gets.to_i
e = gets.to_i

puts b-a
puts c-b
puts d-c
puts e-d

を簡潔に

a, b, c, d, e = 5.times.map { gets.to_i }
puts [b-a, c-b, d-c, e-d]

今だに認識が曖昧な
()と{}の違い

(): 引数がメソッドに渡されるときに使う(召喚みたいな)
def greet(name)
  puts "Hello, #{name}!"
end

greet("Mario")

{}: メソッドに渡す「ブロック」を囲むために使う(スキル実行みたいな)
5.times { puts "Hello" }

-------------------------------------------

年号計算

# "S" = 1926
# "H" = 1989

a = gets.chomp
b = gets.to_i

if a=="S"
puts b+1926-1
elsif a=="H"
puts b+1989-1
end


まだ慣れてないが、ハッシュで簡潔にできる

year_map = {"S" => 1926, "H" => 1989}
a = gets.chomp
b = gets.to_i
puts b + year_map[a] - 1 if year_map[a]

-------------------------------------------

入力された個数の分数値を取得し、合計値を算出。
a = gets.to_i
b = a.times.map {gets.to_i}
puts b.sum

-------------------------------------------

慣れてない内容とメソッドがまだまだあるので、引き続き頑張る。
